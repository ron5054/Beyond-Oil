/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    branches: Branch;
    fryers: Fryer;
    dailyMeasurements: DailyMeasurement;
    foodSamples: FoodSample;
    foodSampleReports: FoodSampleReport;
    'fryer-reports': FryerReport;
    dailyMeasurementReports: DailyMeasurementReport;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    branches: BranchesSelect<false> | BranchesSelect<true>;
    fryers: FryersSelect<false> | FryersSelect<true>;
    dailyMeasurements: DailyMeasurementsSelect<false> | DailyMeasurementsSelect<true>;
    foodSamples: FoodSamplesSelect<false> | FoodSamplesSelect<true>;
    foodSampleReports: FoodSampleReportsSelect<false> | FoodSampleReportsSelect<true>;
    'fryer-reports': FryerReportsSelect<false> | FryerReportsSelect<true>;
    dailyMeasurementReports: DailyMeasurementReportsSelect<false> | DailyMeasurementReportsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name: string;
  isActive?: boolean | null;
  role: 'admin' | 'manager' | 'chef';
  branch?: (number | null) | Branch;
  phoneNumber: string;
  otp?: string | null;
  otpExpires?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "branches".
 */
export interface Branch {
  id: number;
  chainName: 'KFC' | 'McDonalds' | 'Burger King' | 'Wendys' | 'Taco Bell' | 'Subway' | 'Papa Johns' | 'Other';
  logo?: string | null;
  /**
   * Select an hour (0-23)
   */
  filterTime:
    | '0:00'
    | '1:00'
    | '2:00'
    | '3:00'
    | '4:00'
    | '5:00'
    | '6:00'
    | '7:00'
    | '8:00'
    | '9:00'
    | '10:00'
    | '11:00'
    | '12:00'
    | '13:00'
    | '14:00'
    | '15:00'
    | '16:00'
    | '17:00'
    | '18:00'
    | '19:00'
    | '20:00'
    | '21:00'
    | '22:00'
    | '23:00';
  timezone:
    | 'Jerusalem (GMT+2)'
    | 'New York (GMT-5)'
    | 'Los Angeles (GMT-8)'
    | 'Chicago (GMT-6)'
    | 'Denver (GMT-7)'
    | 'Phoenix (GMT-7, no DST)'
    | 'Anchorage (GMT-9)'
    | 'Honolulu (GMT-10)';
  branchName: string;
  branchCode: string;
  phoneNumber?: string | null;
  address?: string | null;
  city?: string | null;
  state?: string | null;
  zipCode?: string | null;
  country: 'il' | 'us';
  /**
   * Select a manager from the Users collection
   */
  manager?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fryers".
 */
export interface Fryer {
  id: number;
  name: string;
  itemsFried: 'Chicken' | 'French Fries' | 'Onion Rings' | 'Fish';
  type: 'Winston (25L)' | 'Frymaster (30L)' | 'Pitco (20L)';
  isActive: boolean;
  branch: number | Branch;
  lastOilChangeDate?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dailyMeasurements".
 */
export interface DailyMeasurement {
  id: number;
  name: string;
  type: 'text' | 'image';
  label: string;
  isActive: boolean;
  branch: number | Branch;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foodSamples".
 */
export interface FoodSample {
  id: number;
  name: string;
  branch: number | Branch;
  isActive: boolean;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foodSampleReports".
 */
export interface FoodSampleReport {
  id: number;
  branch: number | Branch;
  user: number | User;
  fryer?: (number | null) | Fryer;
  name: string;
  image: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fryer-reports".
 */
export interface FryerReport {
  id: number;
  fryer: number | Fryer;
  branch: number | Branch;
  createdBy?: (number | null) | User;
  newOil?: boolean | null;
  newOilDate?: string | null;
  tpmLevel: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dailyMeasurementReports".
 */
export interface DailyMeasurementReport {
  id: number;
  branch: number | Branch;
  user: number | User;
  fryer: number | Fryer;
  name: string;
  value: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'branches';
        value: number | Branch;
      } | null)
    | ({
        relationTo: 'fryers';
        value: number | Fryer;
      } | null)
    | ({
        relationTo: 'dailyMeasurements';
        value: number | DailyMeasurement;
      } | null)
    | ({
        relationTo: 'foodSamples';
        value: number | FoodSample;
      } | null)
    | ({
        relationTo: 'foodSampleReports';
        value: number | FoodSampleReport;
      } | null)
    | ({
        relationTo: 'fryer-reports';
        value: number | FryerReport;
      } | null)
    | ({
        relationTo: 'dailyMeasurementReports';
        value: number | DailyMeasurementReport;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  isActive?: T;
  role?: T;
  branch?: T;
  phoneNumber?: T;
  otp?: T;
  otpExpires?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "branches_select".
 */
export interface BranchesSelect<T extends boolean = true> {
  chainName?: T;
  logo?: T;
  filterTime?: T;
  timezone?: T;
  branchName?: T;
  branchCode?: T;
  phoneNumber?: T;
  address?: T;
  city?: T;
  state?: T;
  zipCode?: T;
  country?: T;
  manager?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fryers_select".
 */
export interface FryersSelect<T extends boolean = true> {
  name?: T;
  itemsFried?: T;
  type?: T;
  isActive?: T;
  branch?: T;
  lastOilChangeDate?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dailyMeasurements_select".
 */
export interface DailyMeasurementsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  label?: T;
  isActive?: T;
  branch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foodSamples_select".
 */
export interface FoodSamplesSelect<T extends boolean = true> {
  name?: T;
  branch?: T;
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "foodSampleReports_select".
 */
export interface FoodSampleReportsSelect<T extends boolean = true> {
  branch?: T;
  user?: T;
  fryer?: T;
  name?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fryer-reports_select".
 */
export interface FryerReportsSelect<T extends boolean = true> {
  fryer?: T;
  branch?: T;
  createdBy?: T;
  newOil?: T;
  newOilDate?: T;
  tpmLevel?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dailyMeasurementReports_select".
 */
export interface DailyMeasurementReportsSelect<T extends boolean = true> {
  branch?: T;
  user?: T;
  fryer?: T;
  name?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}